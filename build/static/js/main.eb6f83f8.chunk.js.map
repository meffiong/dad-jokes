{"version":3,"sources":["Joke.js","Jokelist.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","react_default","a","createElement","className","class","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","Component","Jokelist","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","jokes","length","numJokesToGet","axios","get","headers","Accept","res","push","id","uuid","data","joke","setState","delta","st","map","j","objectSpread","_this2","src","alt","src_Joke_0","key","handleVote","defaultProps","App","src_Jokelist_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb6f83f8.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Joke.css'\n\nclass Joke extends Component {\n    getColor() {\n        if (this.props.votes >= 15) {\n          return \"#4CAF50\";\n        } else if (this.props.votes >= 12) {\n          return \"#8BC34A\";\n        } else if (this.props.votes >= 9) {\n          return \"#CDDC39\";\n        } else if (this.props.votes >= 6) {\n          return \"#FFEB3B\";\n        } else if (this.props.votes >= 3) {\n          return \"#FFC107\";\n        } else if (this.props.votes >= 0) {\n          return \"#FF9800\";\n        } else {\n          return \"#f44336\";\n        }\n      }\n      getEmoji() {\n        if (this.props.votes >= 15) {\n          return \"em em-rolling_on_the_floor_laughing\";\n        } else if (this.props.votes >= 12) {\n          return \"em em-laughing\";\n        } else if (this.props.votes >= 9) {\n          return \"em em-smiley\";\n        } else if (this.props.votes >= 6) {\n          return \"em em-slightly_smiling_face\";\n        } else if (this.props.votes >= 3) {\n          return \"em em-neutral_face\";\n        } else if (this.props.votes >= 0) {\n          return \"em em-confused\";\n        } else {\n          return \"em em-angry\";\n        }\n      }\n      getSize() {\n        if (this.props.votes >= 15) {\n          return \"3\";\n        } else if (this.props.votes >= 12) {\n            return \"2.7\";\n        } else if (this.props.votes >= 9) {\n            return \"2.4\";\n        } else if (this.props.votes >= 6) {\n            return \"2.1\";\n        } else if (this.props.votes >= 3) {\n            return \"1.8\";\n        } else if (this.props.votes >= 0) {\n            return \"1.5\";\n        } else {\n            return \"1.2\";\n        }\n      }\n\n\n    render() {\n        return (\n            <div className=\"Joke\">\n                <div className=\"Joke-buttons\">\n                    <i class=\"fas fa-arrow-up\" onClick={this.props.upvote}></i>\n                    <span className=\"Joke-votes\" style={{borderColor: this.getColor()}}>{this.props.votes}</span>\n                    <i class=\"fas fa-arrow-down\" onClick={this.props.downvote}></i>\n                </div>\n                <div className=\"Joke-text\">{this.props.text}</div>\n                <div className=\"Joke-smiley\"><i className={this.getEmoji()}></i></div>\n            </div>\n        )\n    }\n}\n\nexport default Joke","import React, { Component } from 'react'\nimport axios from 'axios'\nimport './Jokelist.css'\nimport uuid from 'uuid'\nimport Joke from './Joke'\n\n\nclass Jokelist extends Component {\n    static defaultProps = {\n        numJokesToGet: 10\n    };\n\n    constructor(props){\n        super(props)\n        this.state = {\n            jokes: []\n        }\n    };\n\n    async componentDidMount(){\n        let jokes = [];\n        while(jokes.length < this.props.numJokesToGet){\n            let res = await axios.get(\"https://icanhazdadjoke.com/\", { \n                headers: { Accept: \"application/json\" }\n            });\n            jokes.push({id: uuid(),text: res.data.joke, votes: 0})\n        }\n\n        this.setState({jokes})\n        // console.log(jokes);\n    }\n\n    handleVote(id,delta){\n        this.setState(\n            st => ({\n                jokes: st.jokes.map(j =>\n                    (j.id === id ) ? {...j, votes: j.votes + delta  } : j\n                )\n            })\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"Jokelist\">\n                <div className=\"Jokelist-sidebar\">\n                    <h1 className=\"Jokelist-title\"><span>Dad</span> Jokes</h1>\n                    <img src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg' alt=\"Smiley Face\"/>\n                    <button className=\"get-more\">New Jokes</button>\n                </div>\n                <div className=\"Jokelist-jokes\">\n                {this.state.jokes.map((j)=>(\n                    <Joke key={j.id} votes={j.votes} text={j.text} upvote={() => this.handleVote(j.id, 1)} downvote={() => this.handleVote(j.id, -1)} />\n                ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Jokelist","import React from 'react';\nimport Jokelist from './Jokelist'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jokelist />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}